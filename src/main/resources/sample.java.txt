package fr.abachar.highlight;

import fr.abachar.highlight.rules.IncludeRule;
import fr.abachar.highlight.rules.RegexRule;
import fr.abachar.highlight.rules.Rule;

import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

// Comment

/**
 * @author abachar
 */
public abstract class Lexer {

    /**
     *
     */
    private Map<String, State> states;

    /**
     *
     */
    public Lexer() {

        // Initialize rules
        initializeRules();
    }

    /**
     *
     */
    protected abstract void initializeRules();

    protected void addState(String stateName, StateBuilder builder) {

        State state = builder.getState();
        state.setName(stateName);
        if (states == null) {
            states = new HashMap<String, State>();
        }
        states.put(stateName, state);
    }

    protected State resolveState(String name) {
        return states.get(name);
    }

    public List<Token> getTokens(String input) {

        input = input.replace("\r\n", "\n").replace("\r", "\n").replace("\t", "    ");
        if (!input.endsWith("\n")) {
            input += "\n";
        }

        Context context = new Context();
        context.setInput(input);
        context.pushState("root");

        int length = input.length();
        while (context.getPosition() < length) {
            if (!step(context, resolveState(context.peekState()))) {
                break;
            }
        }

        return context.getTokens();
    }


    protected boolean step(Context context, State state) {
        for (Rule rule : state.getRules()) {

            if (rule instanceof IncludeRule) {

                if (step(context, resolveState(((IncludeRule) rule).getStateName()))) {
                    return true;
                }

            } else if (rule instanceof RegexRule) {

                if (runRule(context, (RegexRule) rule)) {
                    return true;
                }

            }
        }

        return false;
    }

    private boolean runRule(Context context, RegexRule rule) {

        Pattern pattern = Pattern.compile(rule.getRegex());
        Matcher matcher = pattern.matcher(context.getInput());
        matcher.region(context.getPosition(), context.getInput().length());

        if (matcher.lookingAt()) {
            // Set matcher
            context.setMatcher(matcher);
            rule.getCallback().execute(context);
            context.setPosition(matcher.end());

            return true;
        }

        return false;
    }
}